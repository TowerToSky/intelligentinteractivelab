'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('../../bibtex/field_value/utils');

var _Entry = require('../../bibtex/Entry');

var _Entry2 = _interopRequireDefault(_Entry);

var _LastName = require('../LastName');

var _LastName2 = _interopRequireDefault(_LastName);

var _PersonName = require('../../bibliography/PersonName');

var _PersonName2 = _interopRequireDefault(_PersonName);

var _AuthorValue = require('../../bibtex/field_value/AuthorValue');

var _AuthorValue2 = _interopRequireDefault(_AuthorValue);

var _StringValue = require('../../bibtex/field_value/StringValue');

var _StringValue2 = _interopRequireDefault(_StringValue);

var _PageRange = require('../../bibtex/field_value/PageRange');

var _PageRange2 = _interopRequireDefault(_PageRange);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* intersperse: Return an array with the separator interspersed between
 * each element of the input array.
 *
 * > _([1,2,3]).intersperse(0)
 * [1,0,2,0,3]
 */
function intersperse(arr, sep) {
  if (arr.length === 0) return [];
  return arr.slice(1).reduce((xs, x) => xs.concat([sep, x]), [arr[0]]);
}

function renderPersonName(name, i) {
  if (!(name instanceof _PersonName2.default)) throw new Error("Object must be of type PersonName: " + name);
  const parts = [];

  // Render last name (von + lastName)
  parts.push(_react2.default.createElement(_LastName2.default, { key: 'author_lastname', name: name }));

  if (name.jrs.length > 0) parts.push(name.jrs.map(_utils.capitalizeFirstLetter).join(' '));
  if (name.initials.length > 0) parts.push(name.initials.join(""));

  return _react2.default.createElement(
    'span',
    { key: i, itemProp: 'author', itemScope: true, itemType: 'https://schema.org/Person', className: '_bib_author' },
    _react2.default.createElement(
      'span',
      { itemProp: 'name' },
      intersperse(parts, ' ')
    )
  );
}

function renderAuthors(authors) {
  let authorsString = [];
  if (authors) if (authors.length > 6) {
    // Siris ES, Miller PD, Barrett-Connor E, et al
    const toList = [];
    for (let i = 0; i < 3; i++) toList.push(authors[i]); // List first 3
    authorsString = intersperse(toList.map(renderPersonName), ', ');
    authorsString.push(", et al");
  } else // Florez H, Martinez R, Chakra W, Strickman-Stein M, Levis S
    authorsString = intersperse(authors.map(renderPersonName), ', ');
  return authorsString;
}

function renderPages(pages) {
  if (!(pages instanceof _PageRange2.default)) throw new Error("Expected object to be instance of PageRange");
  return _react2.default.createElement(
    'span',
    { className: '_bib_pages', key: 'pages' },
    _react2.default.createElement(
      'span',
      { itemProp: 'pageStart' },
      pages.start
    ),
    pages.end ? '-' : '',
    pages.end ? _react2.default.createElement(
      'span',
      { itemProp: 'pageEnd' },
      pages.end
    ) : ''
  );
}
function renderVolume(vol, partOfId) {
  if (!(vol instanceof _StringValue2.default)) throw new Error("Expected object to be instance of StringValue");
  return _react2.default.createElement(
    'span',
    { key: 'volume', itemProp: 'isPartOf',
      itemScope: true,
      itemType: 'https://schema.org/PublicationVolume',
      className: '_bib_volume' },
    _react2.default.createElement(
      'span',
      { itemProp: 'volumeNumber' },
      vol.toUnicode()
    ),
    !!partOfId ? _react2.default.createElement('link', { itemProp: 'isPartOf', href: '#' + partOfId }) : ''
  );
}

/**
 * todo Abbreviate the title of the journal according to the listing in PubMed.
 *
 * For example:
 * Science. 2008;321(5896):1693-1695.
 *
 * @param obj Entry object
 * @returns {string} HTML containing journal data
 */
function renderJournal(obj) {
  const journalParts = [];

  const journalId = obj.fields['journal'] ? "_bib_journal_" + obj.fields['journal'].toUnicode() : null;
  if (journalId) {
    journalParts.push(_react2.default.createElement(
      'span',
      { key: 'journal_name' },
      _react2.default.createElement(
        'cite',
        {
          itemScope: true,
          itemType: 'https://schema.org/Periodical',
          itemID: "#" + journalId,
          className: '_bib_journal' },
        _react2.default.createElement(
          'span',
          { itemProp: 'name' },
          obj.fields['journal'].toUnicode()
        )
      ),
      '.'
    ));
  }

  if (obj.fields['year'] || obj.fields['volume'] || obj.fields['number'] || obj.fields['pages']) {
    const issueParts = [];
    if (obj.fields['year']) {
      const year = obj.fields['year'];
      if (!(year instanceof _StringValue2.default)) throw new Error("Expected object to be instance of StringValue");
      issueParts.push(_react2.default.createElement(
        'span',
        { key: 'year', itemProp: 'datePublished', dateTime: year.toUnicode(),
          className: '_bib_year' },
        year.toUnicode()
      ));
      if (obj.fields['volume'] || obj.fields['number']) issueParts.push(';');
    }
    if (obj.fields['volume']) {
      if (obj.fields['number']) issueParts.push('(');
      issueParts.push(renderVolume(obj.fields['volume'], journalId));
      if (obj.fields['number']) issueParts.push(')');
      if (obj.fields['pages']) issueParts.push(':');
    } else if (journalId) issueParts.push(_react2.default.createElement('link', { itemProp: 'isPartOf', href: '#' + journalId }));
    if (obj.fields['pages']) issueParts.push(renderPages(obj.fields['pages']));

    journalParts.push(_react2.default.createElement(
      'span',
      { key: 'journal_issue',
        itemProp: 'isPartOf',
        itemScope: true,
        itemType: 'http://schema.org/PublicationIssue' },
      issueParts,
      '.'
    ));
  }

  return journalParts.length > 0 ? _react2.default.createElement(
    'span',
    { key: 'journal', className: '_bib_journal' },
    intersperse(journalParts, ' ')
  ) : '';
}

function renderStringValueToString(obj) {
  if (!(obj instanceof _StringValue2.default)) throw new Error("Object must be of type StringValue");
  return obj.toUnicode();
}

function renderUrl(urlValue) {
  const url = renderStringValueToString(urlValue);
  return _react2.default.createElement(
    'span',
    { key: 'url', className: '_bib_url' },
    _react2.default.createElement(
      'a',
      { itemProp: 'url', href: url },
      url
    ),
    '.'
  );
}
function renderAccessDate(accessDate) {
  if (!accessDate.format) throw new Error("Access date must specify a format function");
  return _react2.default.createElement(
    'span',
    { key: 'accessdate', className: '_bib_access_date' },
    'Accessed ',
    _react2.default.createElement(
      'span',
      { dateTime: accessDate.format('YYYY-MM-DD') },
      accessDate.format('MMMM D, YYYY')
    ),
    '.'
  );
}
function renderTitle(title) {
  return _react2.default.createElement(
    'span',
    { key: 'title', className: '_bib_title_wrapper' },
    _react2.default.createElement(
      'cite',
      { className: '_bib_title',
        itemProp: 'name' },
      title.toUnicode()
    ),
    '.'
  );
}

function renderAuthorValue(obj) {
  if (!(obj instanceof _AuthorValue2.default)) throw new Error("Object must be of type AuthorValue");
  return _react2.default.createElement(
    'span',
    { key: 'authors', className: '_bib_authors_wrapper' },
    _react2.default.createElement(
      'span',
      { className: '_bib_authors' },
      renderAuthors(obj.getAuthors())
    ),
    '.'
  );
}

class Reference extends _react.Component {
  renderArticleContents() {
    const obj = this.props.entry;
    const nameParts = [];

    if (obj.fields['author']) nameParts.push(renderAuthorValue(obj.fields['author']));
    if (obj.fields['title']) nameParts.push(renderTitle(obj.fields['title']));
    nameParts.push(renderJournal(obj));
    if (obj.fields['url']) nameParts.push(renderUrl(obj.fields['url']));
    if (obj.fields['urldate']) nameParts.push(renderAccessDate(obj.fields['urldate']));

    return intersperse(nameParts, ' ');
  }

  hasField(fieldName) {
    return this.props.entry.hasOwnProperty(fieldName) && !!this.props.entry[fieldName];
  }

  render() {
    const obj = this.props.entry;
    const isEntry = obj instanceof _Entry2.default;
    if (!isEntry) throw new Error("Object must be of type Entry: " + JSON.stringify(obj));

    let children = [];
    switch (obj.type) {
      case 'article':
        // todo Abbreviate the title of the journal according to the listing in PubMed.
        // Navarro P, Chambers I, Karwacki-Neisius V, et al. Molecular coupling of Xist regulation and pluripotency. Science. 2008;321(5896):1693-1695. http://www.sciencemag.org/cgi/content/full/321/5896/1693. Accessed June 4, 2009.
        // Porell F, Carter M. Discretionary hospitalization of nursing home residents with and without alzheimerâ€™s disease: a multilevel analysis. J Aging Health. 2005;17(2):207-238.
        children = this.renderArticleContents();
        break;
      default:
        console.warn("WARNING: There is no styling yet for library types \"" + obj.type + "\". Assuming it behaves like @article.");
        console.warn("Please submit a feature request at https://github.com/digitalheir/bibliography-js/issues");
        children = this.renderArticleContents();
        break;
    }

    const props = {
      className: "_bib_citation _bib_ama _bib_" + obj.type,
      id: obj.id,
      itemScope: true,
      itemType: "https://schema.org/CreativeWork"
    };
    if (this.props.citation) props['itemProp'] = 'citation';
    return _react2.default.createElement("span", props, children);
  }
}
Reference.propTypes = {
  entry: _react.PropTypes.instanceOf(_Entry2.default).isRequired,
  citation: _react.PropTypes.bool
};
exports.default = Reference;