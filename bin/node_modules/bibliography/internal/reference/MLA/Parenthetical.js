'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('../../bibtex/field_value/utils');

var _Entry = require('../../bibtex/Entry');

var _Entry2 = _interopRequireDefault(_Entry);

var _LastName = require('../LastName');

var _LastName2 = _interopRequireDefault(_LastName);

var _PersonName = require('../../bibliography/PersonName');

var _PersonName2 = _interopRequireDefault(_PersonName);

var _AuthorValue = require('../../bibtex/field_value/AuthorValue');

var _AuthorValue2 = _interopRequireDefault(_AuthorValue);

var _StringValue = require('../../bibtex/field_value/StringValue');

var _StringValue2 = _interopRequireDefault(_StringValue);

var _PageRange = require('../../bibtex/field_value/PageRange');

var _PageRange2 = _interopRequireDefault(_PageRange);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* intersperse: Return an array with the separator interspersed between
 * each element of the input array.
 *
 * > _([1,2,3]).intersperse(0)
 * [1,0,2,0,3]
 */
function intersperse(arr, sep) {
  if (arr.length === 0) return [];
  return arr.slice(1).reduce((xs, x) => xs.concat([sep, x]), [arr[0]]);
}

function renderPages(pages) {
  if (!(pages instanceof _PageRange2.default)) throw new Error("Expected object to be instance of PageRange");
  return _react2.default.createElement(
    'span',
    { className: '_bib_p_pages', key: 'pages' },
    _react2.default.createElement(
      'span',
      { itemProp: 'pageStart' },
      pages.start
    ),
    pages.end ? '-' : '',
    pages.end ? _react2.default.createElement(
      'span',
      { itemProp: 'pageEnd' },
      pages.end
    ) : ''
  );
}

var renderName = function renderName(author) {
  return _react2.default.createElement(
    'span',
    { itemProp: 'author',
      itemScope: true,
      itemType: 'https://schema.org/Person',
      key: author.id,
      className: '_bib_p_author' },
    _react2.default.createElement(_LastName2.default, { name: author })
  );
};
/**
 * See https://owl.english.purdue.edu/owl/resource/747/02/
 */
class Parenthetical extends _react.Component {
  renderAuthors(obj) {
    const children = [];

    if (!obj.fields.author) throw new Error("Entry with id " + obj.id + " did not have author set.");
    const authors = obj.fields.author.getAuthors();
    if (authors.length <= 3) {
      const commad = intersperse(authors.map(renderName), ', ');
      for (let i = 0; i < commad.length; i++) if (i == commad.length - 2) {
        if (commad[i] != ',') throw new Error('Expected ' + i + " to be ', '");
        commad[i] = 'and ';
      }
      commad.forEach(o => children.push(o));
    } else {
      children.push(renderName(authors[0]));
      children.push(" et al.");
    }
    if (this.props.showPage && (this.props.pages || obj.fields.pages)) children.push(' ');

    return children;
  }

  render() {
    const obj = this.props.entry;
    const isEntry = obj instanceof _Entry2.default;
    if (!isEntry) throw new Error("Object must be of type Entry: " + JSON.stringify(obj));

    const children = [];

    children.push("(");
    if (this.props.showAuthor) {
      children.push(_react2.default.createElement(
        'span',
        { key: 'authors', className: '_bib_p_authors' },
        this.renderAuthors(obj)
      ));
    }

    if (this.props.showPage && this.props.pages) children.push(renderPages(this.props.pages));else if (this.props.showPage && obj.fields.pages) children.push(renderPages(obj.fields.pages));

    children.push(")");

    const props = {
      className: "_bib_citation _bib_mla",
      href: this.props.id ? "#" + this.props.id : this.props.href ? this.props.href : undefined,
      itemScope: true,
      itemType: "https://schema.org/CreativeWork"
    };
    if (this.props.citation) props['itemProp'] = 'citation';
    return _react2.default.createElement(props.href ? 'a' : 'span', props, children);
  }

}
Parenthetical.propTypes = {
  entry: _react.PropTypes.instanceOf(_Entry2.default).isRequired,
  id: _react.PropTypes.any,
  href: _react.PropTypes.string,
  pages: _react.PropTypes.instanceOf(_PageRange2.default),
  showAuthor: _react.PropTypes.bool,
  showPage: _react.PropTypes.bool
};
Parenthetical.defaultProps = {
  showAuthor: true,
  showPage: true
};
exports.default = Parenthetical;